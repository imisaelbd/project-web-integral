AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  project-web-integral

  Sample SAM Template for project-web-integral

Globals:
  Function:
    Timeout: 3
#  LambdaExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: lambda.amazonaws.com
#            Action: sts:AssumeRole
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
#        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
#      Path: /
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SSMGetParameter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 'arn:aws:secretsmanager:us-east-1:*'
        - PolicyName: CognitoAdminInitiateAuth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminGetUserAttributeVerificationCode
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminForgetDevice
                  - cognito-idp:AdminConfirmDevice
                  - cognito-idp:AdminUpdateDeviceStatus
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateAuthEventFeedback
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: 'arn:aws:cognito-idp:us-east-1:*:*'
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: arn:aws:s3:::*

        - PolicyName: VPCAndRDSManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateVpc
                  - ec2:CreateSubnet
                  - ec2:ModifySubnetAttribute
                  - ec2:CreateSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"
              - Effect: Allow
                Action:
                  - rds:CreateDBInstance
                  - rds:CreateDBSubnetGroup
                  - rds:AddTagsToResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:PutSecretValue
                Resource: "*"
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-SubnetGroup"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetGroup"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b  # Different AZ
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: True
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref MyCognitoUserPool
      Precedence: 1

  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref MyCognitoUserPool
      Precedence: 2

  ProductAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ProductAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ProductApi
      Type: COGNITO_USER_POOLS
      ProductARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseProductApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH, POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref ProductApi
      StatusCode: '200'

  ProductApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: ProductApi
      Auth:
        Authorizers:
          ProductAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn


#  OptionsFunctionLogGroupProduct:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionProducts}'
#      RetentionInDays: 14
#
#  OptionsFunctionProduct:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: options/
#      Handler: app.lambda_handler
#      Runtime: python3.12
#      Role: !GetAtt LambdaExecutionRole.Arn
#      Architectures:
#        - x86_64
#      Events:
#        InsertTask:
#          Type: Api
#          Properties:
#            RestApiId: !Ref ProductApi
#            Path: /{proxy+}
#            Method: options
#            Auth:
#              Authorizer: ProductAuthorizer

  RegisterProductLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RegisterProductFunction}'
      RetentionInDays: 14

  RegisterProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_product/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        InsertProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ProductApi
            Path: /product/insert
            Method: post
            Auth:
              Authorizer: ProductAuthorizer

  GetProductLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetProductFunction}'
      RetentionInDays: 14

  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_product/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetAllProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ProductApi
            Path: /product/get/{id}
            Method: get
            Auth:
              Authorizer: ProductAuthorizer

  GetProductsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetProductsFunction}'
      RetentionInDays: 14

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_products/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetAllProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ProductApi
            Path: /product/getAll
            Method: get
            Auth:
              Authorizer: ProductAuthorizer

  UpdateProductLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateProductFunction}'
      RetentionInDays: 14

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_product/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ProductApi
            Path: /product/update/{id}
            Method: patch
            Auth:
              Authorizer: ProductAuthorizer

  DeleteProductLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteProductFunction}'
      RetentionInDays: 14

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_product/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ProductApi
            Path: /product/delete/{id}
            Method: delete
            Auth:
              Authorizer: ProductAuthorizer

#  Supplier lambdas
  SupplierAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: SupplierAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref SupplierApi
      Type: COGNITO_USER_POOLS
      SupplierARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseSupplierApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH, POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref SupplierApi
      StatusCode: '200'

  SupplierApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: SupplierApi
      Auth:
        Authorizers:
          SupplierAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  # Log Groups and Lambda Functions for Supplier

  # Log Group for OptionsFunction
#  OptionsFunctionLogGroupSupplier:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub '/aws/lambda/${OptionsFunctionSupplier}'
#      RetentionInDays: 14
#
#  # Supplier Options Function
#  OptionsFunctionSupplier:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: options/
#      Handler: app.lambda_handler
#      Runtime: python3.12
#      Architectures:
#        - x86_64
#      Role: !GetAtt LambdaExecutionRole.Arn
#      Events:
#        InsertTask:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SupplierApi
#            Path: /{proxy+}
#            Method: options
#            Auth:
#              Authorizer: SupplierAuthorizer

  # Log Group for RegisterSupplierFunction
  RegisterSupplierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RegisterSupplierFunction}'
      RetentionInDays: 14

  # Register Supplier Function
  RegisterSupplierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_supplier/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterSupplier:
          Type: Api
          Properties:
            RestApiId: !Ref SupplierApi
            Path: /supplier/insert
            Method: post
            Auth:
              Authorizer: SupplierAuthorizer

  # Log Group for GetSupplierFunction
  GetSupplierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetSupplierFunction}'
      RetentionInDays: 14

  # Get Supplier Function
  GetSupplierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_supplier/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetSupplier:
          Type: Api
          Properties:
            RestApiId: !Ref SupplierApi
            Path: /supplier/get/{id}
            Method: get
            Auth:
              Authorizer: SupplierAuthorizer

  # Log Group for GetSuppliersFunction
  GetSuppliersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetSuppliersFunction}'
      RetentionInDays: 14

  # Get All Suppliers Function
  GetSuppliersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_suppliers/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetSuppliers:
          Type: Api
          Properties:
            RestApiId: !Ref SupplierApi
            Path: /supplier/getAll
            Method: get
            Auth:
              Authorizer: SupplierAuthorizer

  # Log Group for UpdateSupplierFunction
  UpdateSupplierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateSupplierFunction}'
      RetentionInDays: 14

  # Update Supplier Function
  UpdateSupplierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_supplier/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateSupplier:
          Type: Api
          Properties:
            RestApiId: !Ref SupplierApi
            Path: /supplier/update/{id}
            Method: patch
            Auth:
              Authorizer: SupplierAuthorizer

  # Log Group for DeleteSupplierFunction
  DeleteSupplierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteSupplierFunction}'
      RetentionInDays: 14

  # Delete Supplier Function
  DeleteSupplierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_supplier/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteSupplier:
          Type: Api
          Properties:
            RestApiId: !Ref SupplierApi
            Path: /supplier/delete/{id}
            Method: delete
            Auth:
              Authorizer: SupplierAuthorizer

#  user lambdas

  UserAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: UserAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref UserApi
      Type: COGNITO_USER_POOLS
      UserARNs:
        - !GetAtt MyCognitoUserPool.Arn

  DefaultUnauthorizedResponseUserApi:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH, POST,DELETE,OPTIONS'"
      ResponseTemplates:
        application/json: '{"message":"Unauthorized"}'
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref UserApi
      StatusCode: '200'

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: UserApi
      Auth:
        Authorizers:
          UserAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn

  # Log Groups and Lambda Functions for User

  # Log Group for RegisterUserFunction
  RegisterUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RegisterUserFunction}'
      RetentionInDays: 14

  # Register User Function
  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /user/insert
            Method: post
            Auth:
              Authorizer: UserAuthorizer

  # Log Group for GetUserFunction
  GetUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUserFunction}'
      RetentionInDays: 14

  # Get User Function
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /user/get/{id}
            Method: get
            Auth:
              Authorizer: UserAuthorizer

  # Log Group for GetUsersFunction
  GetUsersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetUsersFunction}'
      RetentionInDays: 14

  # Get All Users Function
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_users/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /user/getAll
            Method: get
            Auth:
              Authorizer: UserAuthorizer

  # Log Group for UpdateUserFunction
  UpdateUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UpdateUserFunction}'
      RetentionInDays: 14

  # Update User Function
  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /user/update/{id}
            Method: patch
            Auth:
              Authorizer: UserAuthorizer

  # Log Group for DeleteUserFunction
  DeleteUserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DeleteUserFunction}'
      RetentionInDays: 14

  # Delete User Function
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /user/delete/{id}
            Method: delete
            Auth:
              Authorizer: UserAuthorizer

  CartAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CartAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref UserApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt MyCognitoUserPool.Arn

  RegisterCartFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_cart/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterCart:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /cart/insert/{id}
            Method: post

  UpdateCartFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_cart/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateCart:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /cart/update/{id}
            Method: patch


  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: AuthApi

  LoginFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoginFunction}'
      RetentionInDays: 14

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/
      Handler: login.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /login
            Method: post

  SetPasswordFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SetPasswordFunction}'
      RetentionInDays: 14

  SetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: set_password/
      Handler: set_password.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /set_password
            Method: post

  InsertUserPoolFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${InsertUserPoolFunction}'
      RetentionInDays: 14

  InsertUserPoolFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_user_pool/
      Handler: insert_user_pool.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertUserPool:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /insert_user_pool
            Method: post


Outputs:
  RegisterUserApiUrl:
    Description: "Register User API Gateway endpoint"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/insert"

  RegisterProductApiUrl:
    Description: "Register Product API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/insert"

  RegisterSupplierApiUrl:
    Description: "Register Supplier API Gateway endpoint"
    Value: !Sub "https://${SupplierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/supplier/insert"

  RegisterCartApiUrl:
    Description: "Register Cart API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/insert/{id}"

  GetUserApiUrl:
    Description: "Get User API Gateway endpoint"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/get/{id}"

  GetProductApiUrl:
    Description: "Get Product API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/get/{id}"

  GetSupplierApiUrl:
    Description: "Get Supplier API Gateway endpoint"
    Value: !Sub "https://${SupplierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/supplier/get/{id}"

  GetUsersApiUrl:
    Description: "Get Users API Gateway endpoint"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/getAll"

  GetProductsApiUrl:
    Description: "Get Products API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/getAll"

  GetSuppliersApiUrl:
    Description: "Get Suppliers API Gateway endpoint"
    Value: !Sub "https://${SupplierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/supplier/getAll"

  UpdateProductApiUrl:
    Description: "Update Product API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/update/{id}"

  UpdateSupplierApiUrl:
    Description: "Update Supplier API Gateway endpoint"
    Value: !Sub "https://${SupplierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/supplier/update/{id}"

  UpdateCartApiUrl:
    Description: "Update Cart API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cart/update/{id}"

  DeleteUserApiUrl:
    Description: "Delete User API Gateway endpoint"
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user/delete/{id}"

  DeleteProductApiUrl:
    Description: "Delete Product API Gateway endpoint"
    Value: !Sub "https://${ProductApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/delete/{id}"

  DeleteSupplierApiUrl:
    Description: "Delete Supplier API Gateway endpoint"
    Value: !Sub "https://${SupplierApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/supplier/delete/{id}"

  LoginFunctionArn:
    Description: "ARN of LoginFunction"
    Value: !GetAtt LoginFunction.Arn

  SetPasswordFunctionArn:
    Description: "ARN of SetPasswordFunction"
    Value: !GetAtt SetPasswordFunction.Arn

  InsertUserPoolFunctionArn:
    Description: "ARN of InsertUserPoolFunction"
    Value: !GetAtt InsertUserPoolFunction.Arn

  ApiUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  RegisterUserFunctionArn:
    Description: "Register User Lambda Function ARN"
    Value: !GetAtt RegisterUserFunction.Arn

  RegisterProductFunctionArn:
    Description: "Register Product Lambda Function ARN"
    Value: !GetAtt RegisterProductFunction.Arn

  RegisterSupplierFunctionArn:
    Description: "Register Supplier Lambda Function ARN"
    Value: !GetAtt RegisterSupplierFunction.Arn

  RegisterCartFunctionArn:
    Description: "Register Cart Lambda Function ARN"
    Value: !GetAtt RegisterCartFunction.Arn

  GetUserFunctionArn:
    Description: "Get User Lambda Function ARN"
    Value: !GetAtt GetUserFunction.Arn

  GetProductFunctionArn:
    Description: "Get Product Lambda Function ARN"
    Value: !GetAtt GetProductFunction.Arn

  GetSupplierFunctionArn:
    Description: "Get Supplier Lambda Function ARN"
    Value: !GetAtt GetSupplierFunction.Arn

  GetUsersFunctionArn:
    Description: "Get Users Lambda Function ARN"
    Value: !GetAtt GetUsersFunction.Arn

  GetProductsFunctionArn:
    Description: "Get Products Lambda Function ARN"
    Value: !GetAtt GetProductsFunction.Arn

  GetSuppliersFunctionArn:
    Description: "Get Suppliers Lambda Function ARN"
    Value: !GetAtt GetSuppliersFunction.Arn

  UpdateUserFunctionArn:
    Description: "Update User Lambda Function ARN"
    Value: !GetAtt UpdateUserFunction.Arn

  UpdateProductFunctionArn:
    Description: "Update Product Lambda Function ARN"
    Value: !GetAtt UpdateProductFunction.Arn

  UpdateSupplierFunctionArn:
    Description: "Update Supplier Lambda Function ARN"
    Value: !GetAtt UpdateSupplierFunction.Arn

  UpdateCartFunctionArn:
    Description: "Update Cart Lambda Function ARN"
    Value: !GetAtt UpdateCartFunction.Arn

  DeleteUserFunctionArn:
    Description: "Delete User Lambda Function ARN"
    Value: !GetAtt DeleteUserFunction.Arn

  DeleteProductFunctionArn:
    Description: "Delete Product Lambda Function ARN"
    Value: !GetAtt DeleteProductFunction.Arn

  DeleteSupplierFunctionArn:
    Description: "Delete Supplier Lambda Function ARN"
    Value: !GetAtt DeleteSupplierFunction.Arn
